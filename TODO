# Things to do until the first "usable" release.

Game structure overhaul
-------------------------
* TDD everything!
* Move json serialization code from core classes to the io module
* Move file-loading code from core to io
* Get rid of EntityManager, store Map or Game pointers in GameContext
* Unit: xp, hp and mp double -> int
* Store map-node connections in the map, instead of in the map-node
* WorldSurface how to serve images?
* Game - Map: inheritance -> composition

New direction
-------------
Strategy map and battle map. Armies on strategy map, units on battle
map. Units (armies) are trained in settlements.
* UnitRank: does it still make sense?

Game Concept
------------
* Add `damage class` (e.g. melee, ranged, magic, etc..) to group damages. Units
can only retaliate to attacks if they have a weapon with same damage class.
* Make XP cumulative. Levels are merely xp value intervals
(e.g. 0-100 -> level 0, 101-200 -> level 1).
* Leaders can promote Soldiers to Officers.
* Weapon speed

Map Editor
----------
* Migrate to C++/QQuickItem
* Make it possible to create new maps (the first node has to be created
automatically).
* Batch terrain editing and creation.
* Make it possible to move, or remove objects (settlements, units).
* Do not allow more than one settlement and unit per tile
* Handle switching between maps.

MiniMap
-------
* Why are those gaps between the hexagons?

Gameplay (both core and ui)
---------------------------
* Recruit units.
* Occupy settlements.
* Battle.
* Unit upgrading

UI
--
* Load saved game.
* Make the UI as whole look less awful.
* Add about menu.

Settings
--------
* Store preferred world surface.
* Store map and world search paths.


# Things to be refined

* Allow units to pass through nodes occupied by frendlies
* Do not allow a unit to move after arriving to a node bordering a node occupied
by an enemy (consume all mp when arriving to such node)
